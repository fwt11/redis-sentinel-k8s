apiVersion: v1
kind: ConfigMap
metadata:
  name: gen-conf
data:
  genconf-sentinel: |
    #!/usr/bin/env python3
    import time
    import os
    import subprocess
    from kubernetes import client, config, watch

    #因为redis的库没有这个功能，所以用pexpect和redis-cli来弄
    def monitor_new_master(name, ip):
        cli = "redis-cli -h localhost -p 26379 "
        monitor_cmd = cli + "sentinel monitor {} {} 6379 2".format(name, ip)
        remove_cmd = cli + "sentinel remove {}".format(name)
        flush_config = cli + "sentinel flushconfig"
        
        #change_ip_cmd = "redis-cli -h localhost -p 26379 sentinel set {} ip {}".format(name, ip)
        subprocess.run(remove_cmd.split(" "))
        result = subprocess.run(monitor_cmd.split(" "))
        subprocess.run(flush_config.split(" ")) 
        print(result.stdout)
    
    config.load_incluster_config()
    v1 = client.CoreV1Api()
    appsV1 = client.AppsV1Api()
    pod_name = os.getenv("HOSTNAME")
    while True:
        redis_stateful_set = appsV1.read_namespaced_stateful_set(name = "redis", namespace = "redis")
        if redis_stateful_set.status.ready_replicas == redis_stateful_set.spec.replicas:
            break
        time.sleep(1)
    f = open("/etc/redis/sentinel.conf", "w")
    f.write("port 26379\n")
    monitored_hosts_ip = {}
    for item in v1.list_namespaced_pod(namespace="redis", 
                                    label_selector="app=redis").items:
        name = item.metadata.name
        num = int(name.split("-")[-1])
        if num % 2 == 0:
            #sentinel only monitor master
            fullname = name + '.redis-hs.redis.svc.cluster.local'
            f.write("sentinel monitor {} {} 6379 2\n".format(name, item.status.pod_ip))
            monitored_hosts_ip[name] = item.status.pod_ip
            f.write("sentinel down-after-milliseconds {} 2000\n".format(name))
    f.close()
    print("monitored_pods: ", monitored_hosts_ip)
    w = watch.Watch()
    for event in w.stream(v1.list_namespaced_pod, "redis"):
        print("Event: %s %s" % (event['type'], event['object'].metadata.name))
        obj = event["object"]
        pod_name = obj.metadata.name 
        pod_ip = obj.status.pod_ip
        if pod_name in monitored_hosts_ip.keys() and \
            pod_ip != monitored_hosts_ip[pod_name] and pod_ip is not None:
            print("ip changed, try to monitor new pod...")
            monitor_new_master(pod_name, pod_ip)
            monitored_hosts_ip[pod_name] = pod_ip

  genconf-redis: |
    #!/usr/bin/env python3
    import time
    import os
    import subprocess
    from kubernetes import client, config, watch
    pod_is_slave = False
    
    config.load_incluster_config()
    v1 = client.CoreV1Api()
    appsV1 = client.AppsV1Api()
    pod_name = os.getenv("HOSTNAME")
    f = open("/etc/redis/redis.conf", "w")
    hostnum = int(pod_name.split("-")[-1])
    pod_ip = os.getenv("POD_IP")
    f.write("port 6379\n")
    monitored_ip = ""
    if hostnum % 2:
        #this is a slave
        pod_is_slave = True
        for item in v1.list_namespaced_pod(namespace="redis", 
                                        label_selector="app=redis").items:
            name = item.metadata.name
            if int(name.split("-")[-1]) == hostnum - 1:
                f.write("slaveof {} 6379\n".format(item.status.pod_ip))
                #f.write("slaveof {}.redis-hs.redis.svc.cluster.local 6379\n".format(name))
                monitored_ip = (name, item.status.pod_ip)
                print(monitored_ip)
                break

    f.write("protected-mode no\n")
    f.write("appendonly yes\n")
    f.write("bind 0.0.0.0\n")
    #f.write("bind {}\n".format(pod_ip))
    f.close()
    if pod_is_slave:
        w = watch.Watch()
        for event in w.stream(v1.list_namespaced_pod, "redis"):
            obj = event["object"]
            pod_name = obj.metadata.name 
            pod_ip = obj.status.pod_ip
            if pod_name == monitored_ip[0] and \
                pod_ip != monitored_ip[1] and pod_ip is not None:
                print("ip changed, try to monitor new pod...")
                cmd = "redis-cli config set slaveof {} 6379".format(pod_ip).split(" ")
                subprocess.run(cmd)
                monitored_ip = (pod_name, pod_ip)
                
        
